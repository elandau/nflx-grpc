/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.6.1'
    }
}

dependencies {
    compile  'javax.inject:javax.inject:1'
    compile  'io.grpc:grpc-core:0.9.0'
    compile  'io.grpc:grpc-netty:0.9.0'
    compile  'io.grpc:grpc-protobuf:0.9.0'
    compile  'io.grpc:grpc-stub:0.9.0'
    compile  'com.netflix.governator:governator-core:1.12.1'

    testCompile 'org.slf4j:slf4j-log4j12:1.7.6'
    testCompile 'junit:junit:4.11'
}

task helloWorldServer(type: CreateStartScripts) {
    mainClassName = "com.netflix.karyon.helloworld.HelloWorldServer"
    applicationName = "hello-world-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.0.0-beta-1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:0.9.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

eclipse {
    classpath {
        file {
            withXml {
                def node = it.asNode()
                    node.appendNode('classpathentry', [kind: 'src', path: '/build/generated/source/proto/main/grpc'])
                    node.appendNode('classpathentry', [kind: 'src', path: '/build/generated/source/proto/main/java'])
                    node.appendNode('classpathentry', [kind: 'src', path: '/src//main/proto'])
           }
        }
        downloadSources = true
        downloadJavadoc = true
    }
}